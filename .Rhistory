# ## Load genotype data
#
snps = SlicedData$new();
snps$fileDelimiter = "\t";      # the TAB character
snps$fileOmitCharacters = "NA"; # denote missing values;
snps$fileSkipRows = 1;          # one row of column labels
snps$fileSkipColumns = 1;       # one column of row labels
snps$fileSliceSize = 2000;      # read file in slices of 2,000 rows
snps$LoadFile(SNP_file_name);
#
# ## Load gene expression data
#
genes = SlicedData$new();
genes$fileDelimiter = "\t";      # the TAB character
genes$fileOmitCharacters = "NA"; # denote missing values;
genes$fileSkipRows = 1;          # one row of column labels
genes$fileSkipColumns = 1;       # one column of row labels
genes$fileSliceSize = 2000;      # read file in slices of 2,000 rows
genes$LoadFile(expression_file_name);
#
# ## Load covariates
#
cvrts = SlicedData$new();
cvrts$fileDelimiter = "\t";      # the TAB character
cvrts$fileOmitCharacters = "NA"; # denote missing values;
cvrts$fileSkipRows = 1;          # one row of column labels
cvrts$fileSkipColumns = 1;       # one column of row labels
if(length(covariates_file_name)>0) {
cvrts$LoadFile(covariates_file_name);
}
#
# ## Load local data
#
locals = SlicedData$new();
locals$fileDelimiter = "\t";      # the TAB character
locals$fileOmitCharacters = "NA"; # denote missing values;
locals$fileSkipRows = 1;          # one row of column labels
locals$fileSkipColumns = 1;       # one column of row labels
locals$fileSliceSize = 2000;      # read file in slices of 2,000 rows
locals$LoadFile(LOCAL_file_name);
#
## Run the analysis
me = Matrix_eQTL_main(
snps = snps,
gene = genes,
cvrt = cvrts,
local = locals,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = modelLOCAL,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = TRUE,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE);
unlink(output_file_name);
## Results:
cat('Analysis done in: ', me$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
show(me$all$eqtls)
## Plot the histogram of all p-values
plot(me)
snp_con = read.table(SNP_file_name,header = TRUE,stringsAsFactors = FALSE)
snp_con = snp_con[,c(2:ncol(snp_con))]
gene_con = read.table(expression_file_name,header = TRUE,stringsAsFactors = FALSE)
gene_con = gene_con[,c(2:ncol(gene_con))]
local_con = read.table(LOCAL_file_name,header = TRUE)
local_con = local_con[,c(2:ncol(local_con))]
cvrt_con = read.table(covariates_file_name,header = TRUE)
cvrt_con = cvrt_con[,c(2:ncol(cvrt_con))]
table = NULL
for(i in 1:nrow(snp_con)){
for(j in 1:nrow(gene_con)){
temp = summary(lm(as.numeric(gene_con[j,]) ~ as.numeric(snp_con[i,])+as.numeric(local_con[i,])+as.numeric(cvrt_con[1,])+as.numeric(cvrt_con[2,])))$coefficients[2,]
temp_table = matrix(c(i,j,as.numeric(temp)),nrow=1,ncol=6)
table = rbind(table,temp_table)
}
}
table = as.data.frame(table)
colnames(table) = c("snp","gene","estimate","std.error","t.value","p")
table = table[order(table$p),]
table[which(table$p <= pvOutputThreshold),]
{
cat("\n\n Matrix eQTL: \n");
print(show(me$all$eqtls));
cat("\n R summary(lm()) output: \n");
print(table[which(table$p <= pvOutputThreshold),])
}
library(MatrixEL)
# ################################################
# #test a table
# ################################################
base.dir = find.package('MatrixEL');
# Genotype file name
SNP_file_name = paste(base.dir, "/data/SNP.txt", sep="");
#local file name
LOCAL_file_name = paste(base.dir, "/data/local.txt", sep="");
#Gene expression file name
expression_file_name = paste(base.dir, "/data/GE.txt", sep="");
#Covariates file name
# # Set to character() for no covariates
covariates_file_name = paste(base.dir, "/data/Covariates.txt", sep="");
#
# # Output file name
output_file_name = tempfile();
#
# # Only associations significant at this level will be saved
pvOutputThreshold = 1e-2;
#
# # Error covariance matrix
# # Set to numeric() for identity.
errorCovariance = numeric();
# # errorCovariance = read.table("Sample_Data/errorCovariance.txt");
#
#
# ## Load genotype data
#
snps = SlicedData$new();
snps$fileDelimiter = "\t";      # the TAB character
snps$fileOmitCharacters = "NA"; # denote missing values;
snps$fileSkipRows = 1;          # one row of column labels
snps$fileSkipColumns = 1;       # one column of row labels
snps$fileSliceSize = 2000;      # read file in slices of 2,000 rows
snps$LoadFile(SNP_file_name);
#
# ## Load gene expression data
#
genes = SlicedData$new();
genes$fileDelimiter = "\t";      # the TAB character
genes$fileOmitCharacters = "NA"; # denote missing values;
genes$fileSkipRows = 1;          # one row of column labels
genes$fileSkipColumns = 1;       # one column of row labels
genes$fileSliceSize = 2000;      # read file in slices of 2,000 rows
genes$LoadFile(expression_file_name);
#
# ## Load covariates
#
cvrts = SlicedData$new();
cvrts$fileDelimiter = "\t";      # the TAB character
cvrts$fileOmitCharacters = "NA"; # denote missing values;
cvrts$fileSkipRows = 1;          # one row of column labels
cvrts$fileSkipColumns = 1;       # one column of row labels
if(length(covariates_file_name)>0) {
cvrts$LoadFile(covariates_file_name);
}
#
# ## Load local data
#
locals = SlicedData$new();
locals$fileDelimiter = "\t";      # the TAB character
locals$fileOmitCharacters = "NA"; # denote missing values;
locals$fileSkipRows = 1;          # one row of column labels
locals$fileSkipColumns = 1;       # one column of row labels
locals$fileSliceSize = 2000;      # read file in slices of 2,000 rows
locals$LoadFile(LOCAL_file_name);
#
## Run the analysis
me = Matrix_eQTL_main(
snps = snps,
gene = genes,
cvrt = cvrts,
local = locals,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = modelLOCAL,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = TRUE,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE);
unlink(output_file_name);
## Results:
cat('Analysis done in: ', me$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
show(me$all$eqtls)
## Plot the histogram of all p-values
plot(me)
snp_con = read.table(SNP_file_name,header = TRUE,stringsAsFactors = FALSE)
snp_con = snp_con[,c(2:ncol(snp_con))]
gene_con = read.table(expression_file_name,header = TRUE,stringsAsFactors = FALSE)
gene_con = gene_con[,c(2:ncol(gene_con))]
local_con = read.table(LOCAL_file_name,header = TRUE)
local_con = local_con[,c(2:ncol(local_con))]
cvrt_con = read.table(covariates_file_name,header = TRUE)
cvrt_con = cvrt_con[,c(2:ncol(cvrt_con))]
table = NULL
for(i in 1:nrow(snp_con)){
for(j in 1:nrow(gene_con)){
temp = summary(lm(as.numeric(gene_con[j,]) ~ as.numeric(snp_con[i,])+as.numeric(local_con[i,])+as.numeric(cvrt_con[1,])+as.numeric(cvrt_con[2,])))$coefficients[2,]
temp_table = matrix(c(i,j,as.numeric(temp)),nrow=1,ncol=6)
table = rbind(table,temp_table)
}
}
table = as.data.frame(table)
colnames(table) = c("snp","gene","estimate","std.error","t.value","p")
table = table[order(table$p),]
{
cat("\n\n Matrix eQTL: \n");
print(show(me$all$eqtls));
cat("\n R summary output: \n");
print(table[which(table$p <= pvOutputThreshold),])
}
library("MatrixEL");
# Number of columns (samples)
n = 100;
# Generate the vectors with genotype and expression variables
snps.mat = rnorm(n);
gene.mat = rnorm(n) + 0.5 * snps.mat;
# Create 3 SlicedData objects for the analysis
snps1 = SlicedData$new( matrix( snps.mat, nrow = 1 ) );
gene1 = SlicedData$new( matrix( gene.mat, nrow = 1 ) );
cvrt1 = SlicedData$new();
# Produce no output files
filename = NULL; # tempfile()
# Call the main analysis function
me = Matrix_eQTL_main(
snps = snps1,
gene = gene1,
cvrt = cvrt1,
output_file_name = filename,
pvOutputThreshold = 1,
useModel = modelLINEAR,
errorCovariance = numeric(),
verbose = TRUE,
pvalue.hist = FALSE );
# Pull Matrix eQTL results - t-statistic and p-value
beta = me$all$eqtls$beta;
tstat = me$all$eqtls$statistic;
pvalue = me$all$eqtls$pvalue;
rez = c(beta = beta, tstat = tstat, pvalue = pvalue);
# And compare to those from the linear regression in R
{
cat("\n\n Matrix eQTL: \n");
print(rez);
cat("\n R summary(lm()) output: \n");
lmdl = lm( gene.mat ~ snps.mat );
lmout = summary(lmdl)$coefficients[2,c("Estimate","t value","Pr(>|t|)")];
print( lmout );
}
# Results from Matrix eQTL and "lm" must agree
stopifnot(all.equal(lmout, rez, check.attributes=FALSE));
library("MatrixEL");
# Number of columns (samples)
n = 100;
set.seed(123)
# Generate the vectors with genotype and expression variables
snps.mat = rnorm(n);
gene.mat = rnorm(n) + 0.5 * snps.mat;
# Create 3 SlicedData objects for the analysis
snps1 = SlicedData$new( matrix( snps.mat, nrow = 1 ) );
gene1 = SlicedData$new( matrix( gene.mat, nrow = 1 ) );
cvrt1 = SlicedData$new();
# Produce no output files
filename = NULL; # tempfile()
# Call the main analysis function
me = Matrix_eQTL_main(
snps = snps1,
gene = gene1,
cvrt = cvrt1,
output_file_name = filename,
pvOutputThreshold = 1,
useModel = modelLINEAR,
errorCovariance = numeric(),
verbose = TRUE,
pvalue.hist = FALSE );
# Pull Matrix eQTL results - t-statistic and p-value
beta = me$all$eqtls$beta;
tstat = me$all$eqtls$statistic;
pvalue = me$all$eqtls$pvalue;
rez = c(beta = beta, tstat = tstat, pvalue = pvalue);
# And compare to those from the linear regression in R
{
cat("\n\n Matrix eQTL: \n");
print(rez);
cat("\n R summary(lm()) output: \n");
lmdl = lm( gene.mat ~ snps.mat );
lmout = summary(lmdl)$coefficients[2,c("Estimate","t value","Pr(>|t|)")];
print( lmout );
}
# Results from Matrix eQTL and "lm" must agree
stopifnot(all.equal(lmout, rez, check.attributes=FALSE));
library("MatrixEQTL");
# Number of columns (samples)
n = 100;
# Number of covariates
nc = 10;
set.seed(234)
# Generate the covariates
cvrt.mat = 2 + matrix(rnorm(n*nc), ncol = nc);
# Generate the vectors with genotype and expression variables
snps.mat = cvrt.mat %*% rnorm(nc) + rnorm(n);
gene.mat = cvrt.mat %*% rnorm(nc) + rnorm(n) + 0.5 * snps.mat + 1;
# Create 3 SlicedData objects for the analysis
snps1 = SlicedData$new( matrix( snps.mat, nrow = 1 ) );
gene1 = SlicedData$new( matrix( gene.mat, nrow = 1 ) );
cvrt1 = SlicedData$new( t(cvrt.mat) );
# Produce no output files
filename = NULL; # tempfile()
# Call the main analysis function
me = Matrix_eQTL_main(
snps = snps1,
gene = gene1,
cvrt = cvrt1,
output_file_name = filename,
pvOutputThreshold = 1,
useModel = modelLINEAR,
errorCovariance = numeric(),
verbose = TRUE,
pvalue.hist = FALSE );
# Pull Matrix eQTL results - t-statistic and p-value
beta = me$all$eqtls$beta;
tstat = me$all$eqtls$statistic;
pvalue = me$all$eqtls$pvalue;
rez = c(beta = beta, tstat = tstat, pvalue = pvalue);
# And compare to those from the linear regression in R
{
cat("\n\n Matrix eQTL: \n");
print(rez);
cat("\n R summary(lm()) output: \n");
lmdl = lm( gene.mat ~ snps.mat + cvrt.mat );
lmout = summary(lmdl)$coefficients[2,c("Estimate","t value","Pr(>|t|)")];
print( lmout );
}
# Results from Matrix eQTL and "lm" must agree
stopifnot(all.equal(lmout, rez, check.attributes=FALSE));
library("MatrixEQTL");
set.seed(345)
# Number of columns (samples)
n = 100;
# Number of covariates
nc = 10;
# Generate the standard deviation of the noise
noise.std = 0.1 + rnorm(n)^2;
# Generate the covariates
cvrt.mat = 2 + matrix(rnorm(n*nc), ncol = nc);
# Generate the vectors with genotype and expression variables
snps.mat = cvrt.mat %*% rnorm(nc) + rnorm(n);
gene.mat = cvrt.mat %*% rnorm(nc) + rnorm(n) * noise.std + 0.5 * snps.mat + 1;
# Create 3 SlicedData objects for the analysis
snps1 = SlicedData$new( matrix( snps.mat, nrow = 1 ) );
gene1 = SlicedData$new( matrix( gene.mat, nrow = 1 ) );
cvrt1 = SlicedData$new( t(cvrt.mat) );
# Produce no output files
filename = NULL; # tempfile()
# Call the main analysis function
me = Matrix_eQTL_main(
snps = snps1,
gene = gene1,
cvrt = cvrt1,
output_file_name = filename,
pvOutputThreshold = 1,
useModel = modelLINEAR,
errorCovariance = diag(noise.std^2),
verbose = TRUE,
pvalue.hist = FALSE );
# Pull Matrix eQTL results - t-statistic and p-value
beta = me$all$eqtls$beta;
tstat = me$all$eqtls$statistic;
pvalue = me$all$eqtls$pvalue;
rez = c(beta = beta, tstat = tstat, pvalue = pvalue);
# And compare to those from the linear regression in R
{
cat("\n\n Matrix eQTL: \n");
print(rez);
cat("\n R summary(lm()) output: \n");
lmdl = lm( gene.mat ~ snps.mat + cvrt.mat,
weights = 1/noise.std^2 );
lmout = summary(lmdl)$coefficients[2,c("Estimate","t value","Pr(>|t|)")];
print( lmout );
}
# Results from Matrix eQTL and "lm" must agree
stopifnot(all.equal(lmout, rez, check.attributes=FALSE));
set.seed(567)
# Number of columns (samples)
n = 100;
# Number of covariates
nc = 10;
# Generate the standard deviation of the noise
noise.std = 0.1 + rnorm(n)^2;
# Generate the covariates
cvrt.mat = 2 + matrix(rnorm(n*nc), ncol = nc);
# Generate the vectors with single genotype and expression variables
snps.mat = floor(runif(n, min = 0, max = 3));
gene.mat = 1 + (snps.mat==1) + cvrt.mat %*% rnorm(nc) + rnorm(n) * noise.std;
# Create 3 SlicedData objects for the analysis
snps1 = SlicedData$new( matrix( snps.mat, nrow = 1 ) );
gene1 = SlicedData$new( matrix( gene.mat, nrow = 1 ) );
cvrt1 = SlicedData$new( t(cvrt.mat) );
# Produce no output files
filename = NULL; # tempfile()
# Call the main analysis function
me = Matrix_eQTL_main(
snps = snps1,
gene = gene1,
cvrt = cvrt1,
output_file_name = filename,
pvOutputThreshold = 1,
useModel = modelANOVA,
errorCovariance = diag(noise.std^2),
verbose = TRUE,
pvalue.hist = FALSE );
# Pull Matrix eQTL results - t-statistic and p-value
fstat = me$all$eqtls$statistic;
pvalue = me$all$eqtls$pvalue;
rez = c( Fstat = fstat, pvalue = pvalue);
# And compare to those from ANOVA in R
{
cat("\n\n Matrix eQTL: \n");
print(rez);
cat("\n R anova(lm()) output: \n");
lmdl = lm( gene.mat ~ cvrt.mat + factor(snps.mat),
weights = 1/noise.std^2 );
lmout = anova(lmdl)[2, c("F value","Pr(>F)")];
print( lmout );
}
# Results from Matrix eQTL and "lm" must agree
stopifnot(all.equal(lmout, rez, check.attributes=FALSE));
set.seed(890)
anova.groups = 5;
options(MatrixEQTL.ANOVA.categories = anova.groups);
# Number of columns (samples)
n = 100;
# Number of covariates
nc = 10;
# Generate the standard deviation of the noise
noise.std = 0.1 + rnorm(n)^2;
# Generate the covariates
cvrt.mat = 2 + matrix(rnorm(n*nc), ncol = nc);
# Generate the vectors with single genotype and expression variables
snps.mat = floor(runif(n, min = 0, max = anova.groups));
gene.mat = 1 + (snps.mat==1) + cvrt.mat %*% rnorm(nc) + rnorm(n) * noise.std;
# Create 3 SlicedData objects for the analysis
snps1 = SlicedData$new( matrix( snps.mat, nrow = 1 ) );
gene1 = SlicedData$new( matrix( gene.mat, nrow = 1 ) );
cvrt1 = SlicedData$new( t(cvrt.mat) );
# Produce no output files
filename = NULL; # tempfile()
# Call the main analysis function
me = Matrix_eQTL_main(
snps = snps1,
gene = gene1,
cvrt = cvrt1,
output_file_name = filename,
pvOutputThreshold = 1,
useModel = modelANOVA,
errorCovariance = diag(noise.std^2),
verbose = TRUE,
pvalue.hist = FALSE );
# Pull Matrix eQTL results - t-statistic and p-value
fstat = me$all$eqtls$statistic;
pvalue = me$all$eqtls$pvalue;
rez = c( Fstat = fstat, pvalue = pvalue);
# And compare to those from ANOVA in R
{
cat("\n\n Matrix eQTL: \n");
print(rez);
cat("\n R anova(lm()) output: \n");
lmdl = lm( gene.mat ~ cvrt.mat + factor(snps.mat),
weights = 1/noise.std^2 );
lmout = anova(lmdl)[2, c("F value","Pr(>F)")];
print( lmout );
}
# Results from Matrix eQTL and "lm" must agree
stopifnot(all.equal(lmout, rez, check.attributes=FALSE));
set.seed(680)
# Number of columns (samples)
n = 25;
# Number of covariates
nc = 10;
# Generate the standard deviation of the noise
noise.std = 0.1 + rnorm(n)^2;
# Generate the covariates
cvrt.mat = 2 + matrix(rnorm(n*nc), ncol = nc);
# Generate the vectors with single genotype and expression variables
snps.mat = cvrt.mat %*% rnorm(nc) + rnorm(n);
gene.mat = cvrt.mat %*% rnorm(nc) + rnorm(n) * noise.std +
1 + 0.5 * snps.mat + snps.mat * cvrt.mat[,nc];
# Create 3 SlicedData objects for the analysis
snps1 = SlicedData$new( matrix( snps.mat, nrow = 1 ) );
gene1 = SlicedData$new( matrix( gene.mat, nrow = 1 ) );
cvrt1 = SlicedData$new( t(cvrt.mat) );
# Produce no output files
filename = NULL; # tempfile()
# Call the main analysis function
me = Matrix_eQTL_main(
snps = snps1,
gene = gene1,
cvrt = cvrt1,
output_file_name = filename,
pvOutputThreshold = 1,
useModel = modelLINEAR_CROSS,
errorCovariance = diag(noise.std^2),
verbose = TRUE,
pvalue.hist = FALSE );
# Pull Matrix eQTL results - t-statistic and p-value
beta = me$all$eqtls$beta;
tstat = me$all$eqtls$statistic;
pvalue = me$all$eqtls$pvalue;
rez = c(beta = beta, tstat = tstat, pvalue = pvalue);
# And compare to those from the linear regression in R
{
cat("\n\n Matrix eQTL: \n");
print(rez);
cat("\n R summary(lm()) output: \n");
lmdl = lm( gene.mat ~ snps.mat + cvrt.mat + snps.mat*cvrt.mat[,nc],
weights = 1/noise.std^2 );
lmout = tail(summary(lmdl)$coefficients,1)[,c(1,3,4)];
print( tail(lmout) );
}
# Results from Matrix eQTL and "lm" must agree
stopifnot(all.equal(lmout, rez, check.attributes=FALSE));
devtools::load_all(".")
